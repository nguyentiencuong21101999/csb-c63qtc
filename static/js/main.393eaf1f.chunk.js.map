{"version":3,"sources":["CustomChannelListHeader.jsx","CustomizedApp.js","const.js","App.js","index.js"],"names":["withSendBird","props","createChannel","sdk","setChannelUrl","onSetQuery","_useState","useState","_useState2","Object","slicedToArray","open","setOpen","handleClose","react_default","a","createElement","Fragment","className","Button","variant","color","onClick","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","params","GroupChannelParams","isPublic","isEphemeral","isDistinct","name","then","c","url","catch","console","warn","autoFocus","onChange","e","channelListQuery","channelNameContainsFilter","target","value","placeholder","state","sendBirdSelectors","getCreateChannel","getSdk","config","userId","currentChannelUrl","setCurrentChannelUrl","_useState3","_useState4","showSettings","setShowSettings","_useState5","includeEmpty","_useState6","query","setQuery","src_CustomChannelListHeader","index_es","onChannelSelect","channel","queries","channelUrl","onChatHeaderActionClick","onCloseClick","APP_ID","USER_ID","NICKNAME","App","appId","nickname","src_CustomizedApp","rootElement","document","getElementById","ReactDOM","render"],"mappings":"2QAiGeA,kBAtFf,SAAiCC,GAC/B,IAEEC,EAKED,EALFC,cACAC,EAIEF,EAJFE,IAEAC,EAEEH,EAFFG,cACAC,EACEJ,EADFI,WAEFC,EAAwBC,oBAAS,GAAjCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOK,EAAPH,EAAA,GAAaI,EAAbJ,EAAA,GAMMK,EAAc,WAClBD,GAAQ,IAGV,OACEE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBAAf,WAEEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAb5B,WACtBV,GAAQ,KAYF,WAIFE,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEZ,KAAMA,EACNa,QAASX,EACTY,kBAAgB,qBAChBC,mBAAiB,4BAEjBZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAaC,GAAG,sBAAhB,gBACAd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,4DAIFhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQG,QAAST,EAAaQ,MAAM,WAApC,UAGAP,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEG,QAAS,WACP,IAAIU,EAAS,IAAI7B,EAAI8B,mBACrBD,EAAOE,UAAW,EAClBF,EAAOG,aAAc,EACrBH,EAAOI,YAAa,EAEpBJ,EAAOK,KAAO,OACdnC,EAAc8B,GACXM,KAAK,SAACC,GACLnC,EAAcmC,EAAEC,OAEjBC,MAAM,SAACF,GAAD,OAAOG,QAAQC,KAAKJ,KAC7B1B,KAEFQ,MAAM,UACNuB,WAAS,GAhBX,aAuBN9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACE6B,SAAU,SAACC,GAITzC,EAAW,CACT0C,iBAAkB,CAChBC,0BAA2BF,EAAEG,OAAOC,UAI1CC,YAAY,sBAO+B,SAACC,GACpD,MAAO,CACLlD,cAAemD,IAAkBC,iBAAiBF,GAClDjD,IAAKkD,IAAkBE,OAAOH,MC5BnBpD,kBA9Df,SAAuBC,GAIjBA,EADFuD,OAAUC,OADZ,IAKAnD,EAAkDC,mBAAS,IAA3DC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOoD,EAAPlD,EAAA,GAA0BmD,EAA1BnD,EAAA,GACAoD,EAAwCrD,oBAAS,GAAjDsD,EAAApD,OAAAC,EAAA,EAAAD,CAAAmD,EAAA,GAAOE,EAAPD,EAAA,GAAqBE,EAArBF,EAAA,GAEAG,EAA0BzD,mBAAS,CACjCwC,iBAAkB,CAChBkB,cAAc,EACdjB,0BAA2B,MAH/BkB,EAAAzD,OAAAC,EAAA,EAAAD,CAAAuD,EAAA,GAAOG,EAAPD,EAAA,GAAcE,EAAdF,EAAA,GAOA,OACEpD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kCACbJ,EAAAC,EAAAC,cAACqD,EAAD,CACEjE,cAAe,SAACoC,GACdmB,EAAqBnB,IAEvBnC,WAAY+D,IAGdtD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CACEC,gBAAiB,SAACC,GACZA,GAAWA,EAAQhC,IACrBmB,EAAqBa,EAAQhC,KAE7BmB,EAAqB,KAGzBc,QAASN,KAGbrD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mCACbJ,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CACEI,WAAYhB,EACZiB,wBAAyB,WACvBZ,GAAgB,OAIrBD,GACChD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oCACbJ,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CACEI,WAAYhB,EACZkB,aAAc,WACZb,GAAgB,WC5DnBc,EAAS,uCAGTC,EAAU,IACVC,EAAW,kBCET,SAASC,IACtB,OACElE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAYW,MAAOJ,EAAQpB,OAAQqB,EAASI,SAAUH,GACpDjE,EAAAC,EAAAC,cAACmE,EAAD,QCPR,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO1E,EAAAC,EAAAC,cAACgE,EAAD,MAASI","file":"static/js/main.393eaf1f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nimport { withSendBird, sendBirdSelectors } from \"sendbird-uikit\";\n\nfunction CustomChannelListHeader(props) {\n  const {\n    // from withSendBird\n    createChannel,\n    sdk,\n    // from parent component as prop\n    setChannelUrl,\n    onSetQuery\n  } = props;\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <div className=\"custom-channel-list\">\n        Channels\n        <div>\n          <Button variant=\"contained\" color=\"primary\" onClick={handleClickOpen}>\n            Create\n          </Button>\n        </div>\n        <Dialog\n          open={open}\n          onClose={handleClose}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">Select users</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              \"Search + Implement list of users + checkbox here\"\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button\n              onClick={() => {\n                let params = new sdk.GroupChannelParams();\n                params.isPublic = false;\n                params.isEphemeral = false;\n                params.isDistinct = true;\n                // params.addUserIds([]); add your userIds as array\n                params.name = \"NAME\";\n                createChannel(params)\n                  .then((c) => {\n                    setChannelUrl(c.url);\n                  })\n                  .catch((c) => console.warn(c));\n                handleClose();\n              }}\n              color=\"primary\"\n              autoFocus\n            >\n              Create\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n      <div>\n        <input\n          onChange={(e) => {\n            // apply a throttle here to avoid calling setQuery on every instance see the links for more info\n            // https://codeburst.io/throttling-and-debouncing-in-javascript-b01cad5c8edf\n            // https://github.com/bhaskarGyan/use-throttle\n            onSetQuery({\n              channelListQuery: {\n                channelNameContainsFilter: e.target.value\n              }\n            });\n          }}\n          placeholder=\"search channel\"\n        />\n      </div>\n    </>\n  );\n}\n\nexport default withSendBird(CustomChannelListHeader, (state) => {\n  return {\n    createChannel: sendBirdSelectors.getCreateChannel(state),\n    sdk: sendBirdSelectors.getSdk(state)\n  };\n});\n","import React, { useState } from \"react\";\nimport {\n  withSendBird,\n  Channel as SBConversation,\n  ChannelList as SBChannelList,\n  ChannelSettings as SBChannelSettings\n} from \"sendbird-uikit\";\n\nimport CustomChannelListHeader from \"./CustomChannelListHeader\";\n\nfunction CustomizedApp(props) {\n  // props\n  const {\n    config: { userId }\n  } = props;\n\n  // useState\n  const [currentChannelUrl, setCurrentChannelUrl] = useState(\"\");\n  const [showSettings, setShowSettings] = useState(false);\n\n  const [query, setQuery] = useState({\n    channelListQuery: {\n      includeEmpty: true,\n      channelNameContainsFilter: \"\"\n    }\n  });\n\n  return (\n    <div className=\"customized-app\">\n      <div className=\"sendbird-app__wrap\">\n        <div className=\"sendbird-app__channellist-wrap\">\n          <CustomChannelListHeader\n            setChannelUrl={(url) => {\n              setCurrentChannelUrl(url);\n            }}\n            onSetQuery={setQuery}\n          />\n\n          <SBChannelList\n            onChannelSelect={(channel) => {\n              if (channel && channel.url) {\n                setCurrentChannelUrl(channel.url);\n              } else {\n                setCurrentChannelUrl(\"\");\n              }\n            }}\n            queries={query}\n          />\n        </div>\n        <div className=\"sendbird-app__conversation-wrap\">\n          <SBConversation\n            channelUrl={currentChannelUrl}\n            onChatHeaderActionClick={() => {\n              setShowSettings(true);\n            }}\n          />\n        </div>\n        {showSettings && (\n          <div className=\"sendbird-app__settingspanel-wrap\">\n            <SBChannelSettings\n              channelUrl={currentChannelUrl}\n              onCloseClick={() => {\n                setShowSettings(false);\n              }}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default withSendBird(CustomizedApp);\n","// put your own APP_ID here\n// get your app_id -> https://dashboard.sendbird.com/auth/signin\nexport const APP_ID = \"E6B8A398-8D36-424A-B4E7-97E03D93DC45\";\n\n// set your own USER_ID and NICKNAME\nexport const USER_ID = \"5\";\nexport const NICKNAME = \"tiencuong\";\n\nexport default {\n  APP_ID,\n  USER_ID,\n  NICKNAME\n};\n","import React from \"react\";\nimport { SendBirdProvider as SBProvider } from \"sendbird-uikit\";\nimport \"sendbird-uikit/dist/index.css\";\n\nimport CustomizedApp from \"./CustomizedApp\";\nimport { APP_ID, USER_ID, NICKNAME } from \"./const\";\nimport \"./index.css\";\n\nexport default function App() {\n  return (\n    <div className=\"app-wrapper\">\n      <SBProvider appId={APP_ID} userId={USER_ID} nickname={NICKNAME}>\n        <CustomizedApp />\n      </SBProvider>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}